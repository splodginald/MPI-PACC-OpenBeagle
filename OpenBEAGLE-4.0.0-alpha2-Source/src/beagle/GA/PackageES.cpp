/*
 *  Open BEAGLE
 *  Copyright (C) 2001-2007 by Christian Gagne and Marc Parizeau
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *  Contact:
 *  Laboratoire de Vision et Systemes Numeriques
 *  Departement de genie electrique et de genie informatique
 *  Universite Laval, Quebec, Canada, G1K 7P4
 *  http://vision.gel.ulaval.ca
 *
 */

/*!
 *  \file   beagle/GA/src/PackageES.cpp
 *  \brief  Source code of class GA::PackageES.
 *  \author Christian Gagne
 *  $Revision: 1.4 $
 *  $Date: 2007/09/17 17:25:49 $
 */

#include "beagle/GA.hpp"

using namespace Beagle;


/*!
 *  \brief Construct package with SA-ES objects.
 *  \param inInitSize Size of vectors generated by initialization.
 */
GA::PackageES::PackageES(unsigned int inInitSize) :
		Package("GA-PackageES"),
		mInitSize(inInitSize)
{ }


/*!
 *  \brief Configure system by adding necessary components into it.
 *  \param ioSystem System to configure.
 */
void GA::PackageES::configure(System& ioSystem)
{
	Beagle_StackTraceBeginM();
	Factory& lFactory = ioSystem.getFactory();

	// Add available basic types to the factory
	lFactory.insertAllocator("Beagle::GA::AlgoSAESComma", new GA::AlgoSAESComma::Alloc);
	lFactory.insertAllocator("Beagle::GA::AlgoSAESPlus", new GA::AlgoSAESPlus::Alloc);
	lFactory.insertAllocator("Beagle::GA::CrossoverBlendESVecOp", new GA::CrossoverBlendESVecOp::Alloc);
	lFactory.insertAllocator("Beagle::GA::CrossoverOnePointESVecOp", new GA::CrossoverOnePointESVecOp::Alloc);
	lFactory.insertAllocator("Beagle::GA::CrossoverTwoPointsESVecOp", new GA::CrossoverTwoPointsESVecOp::Alloc);
	lFactory.insertAllocator("Beagle::GA::CrossoverUniformESVecOp", new GA::CrossoverUniformESVecOp::Alloc);
	lFactory.insertAllocator("Beagle::GA::ESVector", new GA::ESVector::Alloc);
	lFactory.insertAllocator("Beagle::GA::InitESVecOp", new GA::InitESVecOp::Alloc);
	lFactory.insertAllocator("Beagle::GA::InitQRESVecOp", new GA::InitQRESVecOp::Alloc);
	lFactory.insertAllocator("Beagle::GA::MutationESVecOp", new GA::MutationESVecOp::Alloc);
	lFactory.insertAllocator("Beagle::GA::MutationQRESVecOp", new GA::MutationQRESVecOp::Alloc);
	lFactory.insertAllocator("Beagle::GA::PackageES", new GA::PackageES::Alloc);
	lFactory.insertAllocator("Beagle::GA::RecombinationESVecOp", new GA::RecombinationESVecOp::Alloc);
	lFactory.insertAllocator("Beagle::GA::RecombinationWeightedESVecOp", new GA::RecombinationWeightedESVecOp::Alloc);

	// Aliases to short name of operators
	lFactory.aliasAllocator("Beagle::GA::AlgoSAESComma", "GA-AlgoSAESComma");
	lFactory.aliasAllocator("Beagle::GA::AlgoSAESPlus", "GA-AlgoSAESPlus");
	lFactory.aliasAllocator("Beagle::GA::CrossoverBlendESVecOp", "GA-CrossoverBlendESVecOp");
	lFactory.aliasAllocator("Beagle::GA::CrossoverOnePointESVecOp", "GA-CrossoverOnePointESVecOp");
	lFactory.aliasAllocator("Beagle::GA::CrossoverTwoPointsESVecOp", "GA-CrossoverTwoPointsESVecOp");
	lFactory.aliasAllocator("Beagle::GA::CrossoverUniformESVecOp", "GA-CrossoverUniformESVecOp");
	lFactory.aliasAllocator("Beagle::GA::ESVector", "GA-ESVector");
	lFactory.aliasAllocator("Beagle::GA::InitESVecOp", "GA-InitESVecOp");
	lFactory.aliasAllocator("Beagle::GA::InitQRESVecOp", "GA-InitQRESVecOp");
	lFactory.aliasAllocator("Beagle::GA::MutationESVecOp", "GA-MutationESVecOp");
	lFactory.aliasAllocator("Beagle::GA::MutationQRESVecOp", "GA-MutationQRESVecOp");
	lFactory.aliasAllocator("Beagle::GA::PackageES", "GA-PackageES");
	lFactory.aliasAllocator("Beagle::GA::RecombinationESVecOp", "GA-RecombinationESVecOp");
	lFactory.aliasAllocator("Beagle::GA::RecombinationWeightedESVecOp", "GA-RecombinationWeightedESVecOp");

	// Set some basic concept-type associations in factory
	lFactory.setConcept("Algorithm", "GA-AlgoSAESComma");
	lFactory.setConcept("CrossoverOp", "GA-CrossoverUniformESVecOp");
	lFactory.setConcept("Genotype", "Beagle::GA::ESVector");
	lFactory.setConcept("InitializationOp", "GA-InitESVecOp");
	lFactory.setConcept("MutationOp", "GA-MutationESVecOp");
	lFactory.setConcept("SelectionOp", "SelectRandomOp");

	// Add quasi-random component
	if(ioSystem.haveComponent("QuasiRandom") == NULL) {
		ioSystem.addComponent(new QuasiRandom);
	}

	// Set default initialization size
	ioSystem.getRegister().setEntryDefaultValue("es.init.vectorsize",
	        new UInt(mInitSize),
	        uint2str(mInitSize));

	Beagle_StackTraceEndM("void GA::PackageES::configureSystem(System&)");
}


/*!
 *  \brief List packages which current package depends.
 *  \return Bag with the packages instanciation on which current package depends.
 *
 *  PackageES depends on PackageBase.
 */
Package::Bag GA::PackageES::listDependencies(void)
{
	Beagle_StackTraceBeginM();
	Package::Bag lDependencies;
	lDependencies.push_back(new PackageBase());
	return lDependencies;
	Beagle_StackTraceEndM("Package::Bag GA::PackageES::listDependencies(void)");
}
